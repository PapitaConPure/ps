CARGAR ls con Lista 1, 3, 4, 2, 8, 9, 10, 5, 6, 7

ENVIAR "- - - Listas - - -"
ENVIAR "Simple: " + ls->unir(", ")
ENVIAR "Ordenada: " + ls->aOrdenada()->unir(", ")
ENVIAR "OrdLambda: " + ls->aOrdenada((a, b) => b - a)->unir(", ") //Al revés
USAR ls->ordenar()
ENVIAR "Simple después de ordenar: " + ls->unir(", ")

ENVIAR "Filtro: " + ls->filtrar(el => el > 5)->unir(", ")
ENVIAR "Mapeo: " + ls->mapear(el => el * 2)->unir(", ")
ENVIAR "BuscarEl: " + ls->encontrar(el => el == 5)
ENVIAR "BuscarId: " + ls->encontrarId(el => el == 5)
ENVIAR "NoEncuEl: " + ls->encontrar(el => el < 0)
ENVIAR "NoEncuId: " + ls->encontrarId(el => el > 15)
ENVIAR "Algún: " + ls->algún(el => el >= 5)
ENVIAR "AlgúnMal: " + ls->alguno(el => el < 0)
ENVIAR "Todos: " + ls->todos(el => el < 12)
ENVIAR "TodosMal: " + ls->todos(el => el < 5)

USAR ls->paraCada(Función(el)
    EXTENDER ls con el
FIN)
ENVIAR "Simple después de cha cha: " + ls->unir(", ")

CARGAR rg con Registro a: 1, c: 3, f: 6, b: 2, d: 4, e: 5, g: 7

ENVIAR "- - - Registros - - -"
ENVIAR "Simple: " + rg
ENVIAR "Filtrado: " + rg->filtrar((clave, valor) => clave == "a" || valor >= 5)

USAR rg->paraCada(Función(clave, valor)
    CARGAR rg->(clave + "Piola") con valor * 2
FIN)
ENVIAR "Simple después de cha cha: " + rg
